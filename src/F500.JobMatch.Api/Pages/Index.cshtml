@page
@model F500.JobMatch.Api.Pages.IndexModel
@{
    ViewData["Title"] = "F500 Job Match";
}

<section class="container py-4">
    <h1 class="display-5 mb-4">Fortune 500 Product Manager Job Match</h1>

    <div class="card mb-4">
        <div class="card-header">1. Upload resume</div>
        <div class="card-body">
            <form id="resumeForm" enctype="multipart/form-data">
                <div class="mb-3">
                    <label for="resumeFile" class="form-label">Resume (PDF, DOCX, TXT)</label>
                    <input type="file" class="form-control" id="resumeFile" name="file" required />
                </div>
                <button type="submit" class="btn btn-primary">Upload</button>
                <div id="resumeStatus" class="mt-2 text-muted"></div>
            </form>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">2. Crawl Fortune 500 careers</div>
        <div class="card-body">
            <form id="crawlForm">
                <div class="mb-3">
                    <label for="csvPath" class="form-label">CSV path</label>
                    <input type="text" id="csvPath" name="csvPath" value="@Model.DefaultCsv" class="form-control" />
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <label for="limitCompanies" class="form-label">Limit companies</label>
                        <input type="number" id="limitCompanies" name="limitCompanies" value="50" class="form-control" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Fresh only</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="freshOnly" name="freshOnly" checked />
                            <label class="form-check-label" for="freshOnly">Skip existing postings</label>
                        </div>
                    </div>
                </div>
                <button type="submit" class="btn btn-secondary mt-3">Run crawl</button>
                <div id="crawlStatus" class="mt-2 text-muted"></div>
            </form>
        </div>
    </div>

    <div class="card">
        <div class="card-header">3. Review matches</div>
        <div class="card-body">
            <p>Once your resume is uploaded and crawl complete, view top matches below:</p>
            <div class="input-group mb-3">
                <input type="text" id="resultResumeId" class="form-control" placeholder="Resume ID" />
                <button id="viewResults" class="btn btn-success" type="button">View Results</button>
            </div>
            <div class="text-muted small">Resume ID will auto-populate after upload.</div>
        </div>
    </div>
</section>

@section Scripts {
    <script>
        const resumeForm = document.getElementById('resumeForm');
        const crawlForm = document.getElementById('crawlForm');
        const resumeStatus = document.getElementById('resumeStatus');
        const crawlStatus = document.getElementById('crawlStatus');
        const resultResumeId = document.getElementById('resultResumeId');
        const viewResults = document.getElementById('viewResults');

        resumeForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(resumeForm);
            resumeStatus.textContent = 'Uploading resume...';
            try {
                const response = await fetch('/api/resume/upload', {
                    method: 'POST',
                    body: formData
                });
                if (!response.ok) {
                    throw new Error('Upload failed');
                }
                const data = await response.json();
                resumeStatus.textContent = `Uploaded. Resume ID: ${data.resumeId}`;
                resultResumeId.value = data.resumeId;
            } catch (err) {
                resumeStatus.textContent = `Error: ${err.message}`;
            }
        });

        crawlForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            crawlStatus.textContent = 'Starting crawl...';
            const payload = {
                csvPath: document.getElementById('csvPath').value,
                limitCompanies: parseInt(document.getElementById('limitCompanies').value || '50', 10),
                freshOnly: document.getElementById('freshOnly').checked
            };
            try {
                const response = await fetch('/api/crawl/run', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                if (!response.ok) {
                    throw new Error('Crawl failed');
                }
                const data = await response.json();
                const summaryText = data.summaries.map(s => `${s.company}: stored ${s.stored}, skipped ${s.skipped}`).join(' | ');
                crawlStatus.textContent = summaryText || 'Crawl complete, no postings stored.';
            } catch (err) {
                crawlStatus.textContent = `Error: ${err.message}`;
            }
        });

        viewResults.addEventListener('click', () => {
            if (!resultResumeId.value) {
                alert('Upload a resume first.');
                return;
            }
            window.location.href = `/Results?resumeId=${encodeURIComponent(resultResumeId.value)}`;
        });
    </script>
}
